# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
# This file uses the interfaces-conf.py pre-processor script for global
# variable substitution.

# <-- GLOBAL VARIABLES DEFINITION --> (prevent typos + easy to find/modify)
# main ethernet trunk (your main network interface)
$define _enx    enx023456789abc 
# the name of your wifi interface (using mac-based persistent names)
$define _wlx    wlxaabbccddee7f
# vlan tag for trusted IoT devices (access to internal services + internet)
$define _vlan_iot       100
# vlan tag for trusted Mobile devices (access to internal services + internet)
$define _vlan_mobile    200
# vlan tag for untrusted "External" IoT devices 
# ("smart home" devices that don't really *need* to call home in my opinion)
# why does my wifi lightbulb need to call home to some sus-looking chinese domains again?
# no internet access, no access to internal services, but can be accessed by trusted local subnets
$define _vlan_external  300
# vlan tag for semi-trusted Guest devices (internet access, no access to internal services)
$define _vlan_guest     400

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

#####################################################
#                 ethernet interfaces               #
#####################################################

# main trunk (DHCP)
auto ${_enx}
allow-hotplug ${_enx}
iface ${_enx} inet dhcp

# trunk IoT VLAN interface (manual, bridged to wlv_iot)
# we *MUST NOT* use the <iface>.<vlan> convention here 
# as that apparently just doesn't work for MAC-based persistent names.
# ¯\_(ツ)_/¯
# therefore link the VLAN interfaces to the physical interface manually.
# Naming convention: Ethernet Network Virtual (env), yeah it's not official,
# but it's easy to see what's going on.
auto env_iot.${_vlan_iot}
iface env_iot.${_vlan_iot} inet manual
    vlan-raw-device ${_enx}

# trunk Mobile VLAN interface (manual, bridged to wlv_mobile)
auto env_mobile.${_vlan_mobile}
iface env_mobile.${_vlan_mobile} inet manual
    vlan-raw-device ${_enx}

# trunk External VLAN interface (manual, bridged to wlv_extern)
auto env_external.${_vlan_external}
iface env_external.${_vlan_external} inet manual
    vlan-raw-device ${_enx}

# trunk Guest VLAN interface (manual, bridged to wlv_guest)
auto env_guest.${_vlan_guest}
iface env_guest.${_vlan_guest} inet manual
    vlan-raw-device ${_enx}

#####################################################
#                 wireless interfaces               #
#####################################################

# the default wireless interface/adapter name of the USB wifi dongle
# to be used with the hostapd package
auto ${_wlx}
iface ${_wlx} inet manual
    # create virtual interfaces for the various SSIDs
    # iw command will fail to apply our custom interface names when using
    # MAC-based persistent names, so we add a fixed MAC address to the virtual
    # interface, then know its generated name, that we can then manually rename
    # to the desired one. It ain't pretty, but it works.
    # Also we need to supply fixed MAC addresses anyways for hostapd to work:
    # MACs must not overlap with block boundaries for hostapd to work
    # so we change the physical interface MAC (in this dummy example ending in "7f"
    # to (70), to prevent overflowing into :80 blocks, as otherwise hostapd would just die 
    # with a cryptic error during startup.
    # Also: yes, we pretty much rename and modify $IFACE here, which
    # is probably not very clean, but we *have* to supply a "real/managed" interface
    # to hostapd, which will then turn it into an "AP" interface. If we supply one
    # already in AP mode, hostapd will complain and refuse to start.
    # the renamed interface will then be configured *again* below under its new name 
    # (wlv_iot in this case)
    # also if you stop the hostapd service it will just delete all virtual interfaces, so
    # do the following steps to restore the correct configuration:
    # - service hostapd stop
    # - service networking restart
    # - service hostapd start
    # also ensure the VLAN interfaces come up properly :)
    # align the MAC address to the block boundaries so the virtual interfaces work as expected 
    # (*:7f -> *:70)
    pre-up /usr/sbin/ip link set dev ${_wlx} address aa:bb:cc:dd:ee:70
    # we rename the existing default interface, and reconfigure it under its new name below
    # try not to dwell on the fact that this is a bit of a hack
    pre-up /usr/sbin/ip link set dev ${_wlx} name wlv_iot
    # post-up (now that we've renamed the interface) create the other virtual interfaces
    # on the same physical device as what we just renamed, and assign the expected MACs
    # (incrementing by one, must all be in the same block)
    up /etc/network/wlx-create-virtual.sh -i wlv_iot -v wlv_mobile -m aabbccddee71
    up /etc/network/wlx-create-virtual.sh -i wlv_iot -v wlv_extern -m aabbccddee72
    up /etc/network/wlx-create-virtual.sh -i wlv_iot -v wlv_guest -m aabbccddee73

# virtual IoT WiFi interface, raw
# Naming convention: Wireless Network Virtual (wlv), yeah, still a custom convention
auto wlv_iot
iface wlv_iot inet manual

# virtual IoT WiFi VLAN interface, access mode (VLAN tagging, translation)
# egress: tagged traffic from upstream -> tc magic -> untagged to clients
# ingress: untagged traffic from clients -> tc magic -> tagged to upstream
auto wlv_iot.${_vlan_iot}
iface wlv_iot.${_vlan_iot} inet manual
    vlan-raw-device wlv_iot
    # setup VLAN tagging and translation for cisco-style "access mode ports"
    # this is done using tc policing and packet mangling using tc filters
    # so setup the tc boilerplate for this interface (qdiscs + filters)
    up /etc/network/tc/vlan-access-mode-up.sh -i wlv_iot -v ${_vlan_iot}
    down /etc/network/tc/vlan-access-mode-down.sh -i wlv_iot -v ${_vlan_iot}

# virtual Mobile WiFi interface, raw
auto wlv_mobile
iface wlv_mobile inet manual

# virtual Mobile WiFi VLAN interface, access mode (VLAN tagging, translation)
auto wlv_mobile.${_vlan_mobile}
iface wlv_mobile.${_vlan_mobile} inet manual
    vlan-raw-device wlv_mobile
    up /etc/network/tc/vlan-access-mode-up.sh -i wlv_mobile -v ${_vlan_mobile}
    down /etc/network/tc/vlan-access-mode-down.sh -i wlv_mobile -v ${_vlan_mobile}

# virtual External WiFi interface, raw
auto wlv_extern
iface wlv_extern inet manual

# virtual External WiFi VLAN interface, access mode (VLAN tagging, translation)
auto wlv_extern.${_vlan_external}
iface wlv_extern.${_vlan_external} inet manual
    vlan-raw-device wlv_extern
    up /etc/network/tc/vlan-access-mode-up.sh -i wlv_extern -v ${_vlan_external}
    down /etc/network/tc/vlan-access-mode-down.sh -i wlv_extern -v ${_vlan_external}

# virtual Guest WiFi interface, raw
auto wlv_guest
iface wlv_guest inet manual

# virtual Guest WiFi VLAN interface, access mode (VLAN tagging, translation)
auto wlv_guest.${_vlan_guest}
iface wlv_guest.${_vlan_guest} inet manual
    vlan-raw-device wlv_guest
    up /etc/network/tc/vlan-access-mode-up.sh -i wlv_guest -v ${_vlan_guest}
    down /etc/network/tc/vlan-access-mode-down.sh -i wlv_guest -v ${_vlan_guest}

#####################################################
#                 bridge interfaces                 #
#####################################################

# IoT bridge
auto br_iot
iface br_iot inet manual
    bridge_ports env_iot.${_vlan_iot} wlv_iot.${_vlan_iot}

# Mobile bridge
auto br_mobile
iface br_mobile inet manual
    bridge_ports env_mobile.${_vlan_mobile} wlv_mobile.${_vlan_mobile}

# External bridge
auto br_extern
iface br_extern inet manual
    bridge_ports env_external.${_vlan_external} wlv_extern.${_vlan_external}

# Guest bridge
auto br_guest
iface br_guest inet manual
    bridge_ports env_guest.${_vlan_guest} wlv_guest.${_vlan_guest}